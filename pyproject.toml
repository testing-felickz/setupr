[tool.poetry]
name = "setupr"
version = "0.4.0"
description = "Setupr ships the Worldr infrastructure."
authors = ["Dr Yann Golanski <ygg@worldr.com>"]
keywords = ["worldr"]
license = "MIT"
homepage = "https://github.com/worldr/setupr"
repository = "https://github.com/worldr/setupr"
readme = "README.md"
packages = [
  {include = "setupr"}
]
include = [
    "LICENSE",
    "docs/assets/logo.png",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
rich = "^12.4.4"
click = "^8.1.3"
click-help-colors = "^0.9.1"
python-gnupg = "^0.5.0"
requests = "^2.28.1"
pendulum = "^2.1.2"
plumbum = "^1.7.2"
sha256sum = "^2022.6.11"
semver = ">=2.10,<3"
structlog = "^22.1.0"
"ruamel.yaml" = "^0.17.21"
protobuf = "^4.21.6"
google-cloud-storage = "^2.5.0"
distro = "^1.8.0"

[tool.poetry.dev-dependencies]
black = "^22.3.0"
isort = "^5.10.1"
pytest = "^7.1.3"
mkdocs = "^1.3.0"
mkdocs-material = "^8.3.9"
mkdocstrings = { extras = ["python"], version = "^0.19.0" }
mypy = "^0.981"
pre-commit = "^2.20.0"
pdbpp = "^0.10.3"
coverage = { extras = ["toml"], version = "^6.4.1" }
types-requests = "^2.28.2"
requests-mock = "^1.9.3"
bandit = "^1.7.4"
pytest-skip-slow = "^0.0.3"
radon = "^5.1.0"
commitizen = "^2.31.0"
python-semantic-release = "7.32.0"
pytest-cov = "^4.0.0"
pydocstyle = "^6.1.1"
ruff = "^0.0.94"
flakeheaven = "^3.0.0"
flake8-black = "^0.3.3"
dlint = "^0.13.0"
flake8-mock = "^0.3"
flake8-pytest-style = "^1.6.0"
flake8-fixme = "^1.1.1"
flake8-debugger = "^4.1.2"
flake8-warnings = "^0.3.0"
flake8-simplify = "^0.19.3"
flake8-secure-coding-standard = "^1.3.0"
flake8-comprehensions = "^3.10.0"
flake8-isort = "^4.2.0"
ipython = "^8.5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
include = '\.pyi?$'
target-version = ['py310']
fast = true
exclude = '''
(
  /(                        # exclude a few common directories in the
    \.git                   # root of the project
    | \.pytest_cache
    | python-venv
    | \.venv
    | build
    | dist
    | \.tox
  ))
'''

[tool.isort]
profile = "black"
line_length = 79
known_third_party = [
    "click",
    "click_help_colors",
    "distro",
    "gnupg",
    "google",
    "pendulum",
    "plumbum",
    "pytest",
    "requests",
    "requests_mock",
    "rich",
    "ruamel",
    "semver",
    "sha256sum",
    "structlog",
]

[tool.mypy]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
exclude = [
    '\.venv',
    'tests'
]

[tool.mypy-google.cloud]
ignore_missing_imports = "True"

[tool.poetry.scripts]
setupr = "setupr.console:main"

[tool.pytest.ini_options]
log_auto_indent = true

#log_cli = true
#log_cli_level = "ERROR"
#log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
#log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

junit_duration_report = "total"
addopts = "-ra -q --junit-xml=pytest.xml --last-failed "

[tool.coverage.run]
parallel = true
branch = true

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.pydocstyle]
match-dir = "setupr"

[tool.ruff]
line-length = 79

[tool.flakeheaven]
format = "grouped"
max_line_length = 7.9

[tool.flakeheaven.plugins]
dlint = ["+*"]
# flake8-bandit = ["+*"]
flake8-black = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-fixme = ["+*"]
flake8-isort = ["+*"]
flake8-mock = ["+*"]
# flake8-noqa = ["+*"]
flake8-pytest-style = ["+*"]
flake8-secure-coding-standard = ["+*"]
flake8-simplify = ["+*"]
flake8-warnings = ["+*"]

# Match by glob.
[tool.flakeheaven.exceptions."**/test_*.py"]
flake8-secure-coding-standard = ["-SCS108"]
